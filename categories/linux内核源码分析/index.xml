<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>linux内核源码分析 - 分类 - povcfe&#39;s blog</title>
        <link>https://povcfe.github.io/categories/linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
        <description>linux内核源码分析 - 分类 - povcfe&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sun, 21 Mar 2021 07:01:39 -0700</lastBuildDate><atom:link href="https://povcfe.github.io/categories/linux%E5%86%85%E6%A0%B8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" rel="self" type="application/rss+xml" /><item>
    <title>linux内核(5.4.81)---网络模块源码分析</title>
    <link>https://povcfe.github.io/posts/kernel_net/</link>
    <pubDate>Sun, 21 Mar 2021 07:01:39 -0700</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_net/</guid>
    <description><![CDATA[发表于安全客
 1. socket  1.1 sock_create 1.1.1 sock_alloc 1.1.2 inet_create 1.1.2.1 sk_alloc 1.2 sock_map_fd   2. send(运输层)  2.1 import_single_range 2.2 sockfd_lookup_light 2.3 sock_sendmsg 2.4 udp_sendmsg 2.4.1 udp_cmsg_send 2.4.2 TOS 2.4.3 多播/本地广播 2.4.4 检查sock中路由信息是否过期 2.4.5 udp_send_skb 2.4.6 udp_push_pending_frames   3. recv(运输层)  2.1 udp_recvmsg 2.1.1 __skb_recv_udp 2.1.1.1 __skb_try_recv_from_queue   4. IP(网络层)  4.1 ip_cmsg_send 4.2 ip_make_skb 4.2.1 ip_setup_cork 4.2.2 __ip_make_skb 4.3 ip_append_data 4.3.1 __ip_append_data 4.4 ip_send_skb 4.]]></description>
</item><item>
    <title>linux内核(5.4.81)---KASAN</title>
    <link>https://povcfe.github.io/posts/kernel_kasan/</link>
    <pubDate>Sun, 21 Mar 2021 06:14:56 -0700</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_kasan/</guid>
    <description><![CDATA[发表于安全客
KASAN 简述   KASAN是内核用于动态检测内存错误的工具, 简单来说, 数据区域可分为两种:可访问区域，不可访问区域(red_zone).KASAN存在影子内存(shadow memory), 他和正常内存的比例是1:8, 即1byte shadow memory可以代表8bytes 正常内存的可访问性.
  128TB(内核正常内存) : 16TB(影子内存) &mdash; Documentation/x86/x86_64/mm.rst x86-64 内存布局显示如下:
   ffffec0000000000 | -20 TB | fffffbffffffffff | 16 TB | KASAN shadow memory   具体规则(+: byte可访问, -: byte不可访问)
 如果1byte shadow memory对应的8bytes 内存都可访问, 则*(shadow memory) == 0  [0] -&gt; [+, +, +, +, +, +, +, +]  如果1byte shadow memory对应的8bytes 内存都不可访问, 则*(shadow memory)为负数  [-1] -&gt; [-, -, -, -, -, -, -, -]  如果1byte shadow memory对应的8bytes 内存中有N bytes可访问, 则*(shadow memory) == N  if N = 3 [3] -&gt; [+, +, +, -, -, -, -, -]   实现原理]]></description>
</item><item>
    <title>linux内核(5.4.81)---内存管理模块源码分析</title>
    <link>https://povcfe.github.io/posts/kernel_mm/</link>
    <pubDate>Tue, 12 Jan 2021 03:54:11 -0800</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_mm/</guid>
    <description><![CDATA[已投稿于安全客
   页表   1.1. 页表查询&ndash;以x86_64下的4级页表举例(硬件)  1.1.1. TLB转换 1.1.2. 页表转换 1.1.3. 页表结构cache转换   1.2. 拓展  1.2.1. 普通页表cache 1.2.2. Huge_Page 1.2.3. 页表标志位      伙伴算法(buddy)    alloc_pages源码分析   3.1. alloc_pages_current 3.2. __alloc_pages_nodemask  3.2.1. get_page_from_freelist 3.2.2. _alloc_pages_slowpath      _free_pages源码分析   4.1. free_unref_page  4.1.1. free_pcppages_bulk   4.2. __free_pages_ok  4.2.1. __free_one_page      slub算法   5.]]></description>
</item><item>
    <title>linux内核(5.4.81)---内核引导</title>
    <link>https://povcfe.github.io/posts/kernel_boot/</link>
    <pubDate>Sat, 06 Jun 2020 10:34:06 -0800</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_boot/</guid>
    <description><![CDATA[发表于看雪论坛
 本文详细讲解linux内核的加载过程，参考linux-insiders，并结合linux-5.6.6代码对原文的部分老旧内容做修改
 引导   按下电源开关后, CPU设置寄存器为预定值，程序在实模式下运行，程序首先执行0xfffffff0(映射至ROM)处内容，此处为复位向量，直接跳转至BIOS。
  BIOS初始化，检查硬件，寻找可引导设备，跳转至引导扇区代码(boot.img)
  寻找可引导设备方式: 定位MBR分区, 引导扇区存储在第一个扇区(512字节)的头446字节处。引导扇区以0x55和0xaa(magic bytes)结束。
  MBR分区代码只占用一个扇区, 空间较小，只执行了一些初始化工作, 然后跳转至GRUB2的core image(以diskboot.img为起始)继续执行。
    core image的初始化代码将剩余的core image(包含GRUB 2的内核代码和文件系统驱动)加载到内存中，运行grub_main
  grub_main 初始化控制台，计算模块基地址，设置root设备，读取 grub 配置文件，加载模块等，最后将grub切换为normal模式
  normal模式调用grub_normal_execute完成最后的准备工作，显示一个菜单列出可用的操作系统。
  选择操作系统后grub_menu_execute_entry被调用，用以运行boot命令，引导操作系统, 运行kernel代码
  内核自带bootloader，但是新版本内核已经弃用
  kernel boot protocol规定，bootloader必须具备协议中规定的头信息
      实模式运行内核   kernel地址(header.S _start)位于X + sizeof(KernelBootSector) + 1
 内核加载进入内存后，空间排布   | Protected-mode kernel | 100000 +------------------------+ | I/O memory hole | 0A0000 +------------------------+ | Reserved for BIOS | Leave as much as possible unused ~ ~ | Command line | (Can also be below the X+10000 mark) X+10000 +------------------------+ | Stack/heap | For use by the kernel real-mode code.]]></description>
</item></channel>
</rss>
