<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>povcfe&#39;s blog</title>
        <link>https://povcfe.github.io/</link>
        <description>povcfe&#39;s blog</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 30 Apr 2022 03:12:33 -0700</lastBuildDate>
            <atom:link href="https://povcfe.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>挖洞日记</title>
    <link>https://povcfe.github.io/posts/something/</link>
    <pubDate>Sat, 30 Apr 2022 03:12:33 -0700</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/something/</guid>
    <description><![CDATA[ 漏洞挖掘经常是没有反馈的, 日常自闭, 在这里记录一下
   2022-4-30
  写了一个内核漏洞检测工具, 截止到目前水了六个信创操作系统漏洞, 测试仍在继续, 预计一周报一个
  写了一个Httpd Fuzz工具, 在lighttpd那里收获三个漏洞, 目前Fuzz目标为nginx, 期间发现nginx自定义内存管理api, 这里使用xxx方法进行适配
  对nginx做代码审计, 步入正轨, 着重关注数据流入接口
  对内核防御这方面有一些思路, 以后有空再去写
  对IOS内核有些兴趣, 正在观望是否入坑
    2022-5-12
  从一个国产操作系统上水了九个内核洞
  写好内核防御思路了，需要再考虑一下是否全面
  还是转安卓把
    ]]></description>
</item><item>
    <title>nginx-ldap-auth之user注入漏洞</title>
    <link>https://povcfe.github.io/posts/nginx-ldap-auth/</link>
    <pubDate>Tue, 19 Apr 2022 03:13:03 -0700</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/nginx-ldap-auth/</guid>
    <description><![CDATA[前段时间, 有人声称发现nginx 0day, 并在NginxDay中持续跟进漏洞上报流程, 虽然漏洞确实存在, 但漏洞只存在于一个示例项目, 且漏洞危害较低. 就目前笔者漏洞分析来看, 该行为多少有点花里胡哨, 下面分析一下这个有些鸡肋的漏洞.
   nginx提供ngx_http_auth_request_module模块用于鉴权, 其功能特点为需要用户自定义实现鉴权api, 并由ngx_http_auth_request_module模块调用
  nginx-ldap-auth结合ldap实现鉴权机制, 是一种用户自定义实现鉴权api的示例项目
  nginx-ldap-auth功能原理   nginx-ldap-auth关键文件
 backend-sample-app.py(处理登录表单), 将user:passwd base64编码后设置Cookie nginx-ldap-auth-daemon.py(结合ldap进行鉴权), 解析http报文中的Cookie/Authorization(有Cookie的情况下鉴权以Cookie为主)    ngx_http_auth_request_module模块常用路由
  nginx直接向nginx-ldap-auth-daemon.py对应url发起请求, 此时未设置Cookie/Authorization返回401
  nginx转发请求至backend-sample-app.py对应url处理登录表单, 并设置Cookie
  nginx重定向请求至nginx-ldap-auth-daemon.py对应url, 此时存在Cookie, 解析user, passwd, 调用ldap实现鉴权, 成功则返回200
    nginx-ldap-auth-daemon.py鉴权分析 从下面鉴权代码可以看出, nginx-ldap-auth-daemon.py使用searchfilter过滤ldap结果, 查找目标登录用户
// ctx[&#39;template&#39;]默认对应: &#39;template&#39;: (&#39;X-Ldap-Template&#39;, &#39;(cn=%(username)s)&#39;), // ctx[&#39;user&#39;], ctx[&#39;pass&#39;]: 从Cookie中解析出的user, passwd searchfilter = ctx[&#39;template&#39;] % { &#39;username&#39;: ctx[&#39;user&#39;] } .]]></description>
</item><item>
    <title>linux内核(5.4.81)---网络模块源码分析</title>
    <link>https://povcfe.github.io/posts/kernel_net/</link>
    <pubDate>Sun, 21 Mar 2021 07:01:39 -0700</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_net/</guid>
    <description><![CDATA[发表于安全客
 1. socket  1.1 sock_create 1.1.1 sock_alloc 1.1.2 inet_create 1.1.2.1 sk_alloc 1.2 sock_map_fd   2. send(运输层)  2.1 import_single_range 2.2 sockfd_lookup_light 2.3 sock_sendmsg 2.4 udp_sendmsg 2.4.1 udp_cmsg_send 2.4.2 TOS 2.4.3 多播/本地广播 2.4.4 检查sock中路由信息是否过期 2.4.5 udp_send_skb 2.4.6 udp_push_pending_frames   3. recv(运输层)  2.1 udp_recvmsg 2.1.1 __skb_recv_udp 2.1.1.1 __skb_try_recv_from_queue   4. IP(网络层)  4.1 ip_cmsg_send 4.2 ip_make_skb 4.2.1 ip_setup_cork 4.2.2 __ip_make_skb 4.3 ip_append_data 4.3.1 __ip_append_data 4.4 ip_send_skb 4.]]></description>
</item><item>
    <title>linux内核(5.4.81)---KASAN</title>
    <link>https://povcfe.github.io/posts/kernel_kasan/</link>
    <pubDate>Sun, 21 Mar 2021 06:14:56 -0700</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_kasan/</guid>
    <description><![CDATA[发表于安全客
KASAN 简述   KASAN是内核用于动态检测内存错误的工具, 简单来说, 数据区域可分为两种:可访问区域，不可访问区域(red_zone).KASAN存在影子内存(shadow memory), 他和正常内存的比例是1:8, 即1byte shadow memory可以代表8bytes 正常内存的可访问性.
  128TB(内核正常内存) : 16TB(影子内存) &mdash; Documentation/x86/x86_64/mm.rst x86-64 内存布局显示如下:
   ffffec0000000000 | -20 TB | fffffbffffffffff | 16 TB | KASAN shadow memory   具体规则(+: byte可访问, -: byte不可访问)
 如果1byte shadow memory对应的8bytes 内存都可访问, 则*(shadow memory) == 0  [0] -&gt; [+, +, +, +, +, +, +, +]  如果1byte shadow memory对应的8bytes 内存都不可访问, 则*(shadow memory)为负数  [-1] -&gt; [-, -, -, -, -, -, -, -]  如果1byte shadow memory对应的8bytes 内存中有N bytes可访问, 则*(shadow memory) == N  if N = 3 [3] -&gt; [+, +, +, -, -, -, -, -]   实现原理]]></description>
</item><item>
    <title>一些思考</title>
    <link>https://povcfe.github.io/posts/reprint/</link>
    <pubDate>Wed, 27 Jan 2021 05:40:55 -0800</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/reprint/</guid>
    <description><![CDATA[一些思考, 转眼间, 入坑安全已经两年, 一些心得
 2017-2018学年(大一)   2017年进入大学, 学习土木工程专业, 如果没有后面不知缘由的对计算机的热爱, 或许我现在正在朝着桥梁设计建造工程师这个方向迈进
  大一的时候喜欢看大国工匠, 内心热血, 总想做些什么, 却发现自己什么都做不了
  在通识课上, 第一次接触c语言, 由此写出了人生中的第一行hello world
  奇怪的是, 我并没有想着要用c语言去完成什么高大上的项目, 自己告诉自己, 我只是想知道为什么hello world可以被输出
  那几个月天天抱着一本厚厚的c语言去研究, 这也算是我的计算机启蒙了吧
  但是我还是不知道为什么hello world可以被输出?
  再后来对这个问题答案的渴求促使我转专业(即使降级也要转专业), 我不想和这个问题擦肩而过(或许那个时候, 如果有人可以和我说懂这个问题, 我就可以在土木安心呆着了呢 =.=)
  接下来就是准备转专业, 开始转专业, 降级转网安成功(顺便遇到了我可爱的女朋友 &gt;。&lt;)
  2018-2019学年(还是大一)   带着2017年的问题, 我进入网安, 接触了二进制, 我坚信学习这个方向可以解决我的疑惑
  于是2018年的那个秋天, 捧着汇编, 程序员的自我修养度日, 三个月后颤颤巍巍的拿到第一个栈溢出shell, 似懂非懂, 浑浑噩噩, 有拿到shell的喜悦, 但疑惑加深了, 我还是没有解决我的问题, 仿佛陷入死胡同, 而且三个月才学会第一个栈溢出, 这很明显是傻子行为]]></description>
</item><item>
    <title>linux内核(5.4.81)---内存管理模块源码分析</title>
    <link>https://povcfe.github.io/posts/kernel_mm/</link>
    <pubDate>Tue, 12 Jan 2021 03:54:11 -0800</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_mm/</guid>
    <description><![CDATA[已投稿于安全客
   页表   1.1. 页表查询&ndash;以x86_64下的4级页表举例(硬件)  1.1.1. TLB转换 1.1.2. 页表转换 1.1.3. 页表结构cache转换   1.2. 拓展  1.2.1. 普通页表cache 1.2.2. Huge_Page 1.2.3. 页表标志位      伙伴算法(buddy)    alloc_pages源码分析   3.1. alloc_pages_current 3.2. __alloc_pages_nodemask  3.2.1. get_page_from_freelist 3.2.2. _alloc_pages_slowpath      _free_pages源码分析   4.1. free_unref_page  4.1.1. free_pcppages_bulk   4.2. __free_pages_ok  4.2.1. __free_one_page      slub算法   5.]]></description>
</item><item>
    <title>linux内核(5.4.81)---内核引导</title>
    <link>https://povcfe.github.io/posts/kernel_boot/</link>
    <pubDate>Sat, 06 Jun 2020 10:34:06 -0800</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_boot/</guid>
    <description><![CDATA[发表于看雪论坛
 本文详细讲解linux内核的加载过程，参考linux-insiders，并结合linux-5.6.6代码对原文的部分老旧内容做修改
 引导   按下电源开关后, CPU设置寄存器为预定值，程序在实模式下运行，程序首先执行0xfffffff0(映射至ROM)处内容，此处为复位向量，直接跳转至BIOS。
  BIOS初始化，检查硬件，寻找可引导设备，跳转至引导扇区代码(boot.img)
  寻找可引导设备方式: 定位MBR分区, 引导扇区存储在第一个扇区(512字节)的头446字节处。引导扇区以0x55和0xaa(magic bytes)结束。
  MBR分区代码只占用一个扇区, 空间较小，只执行了一些初始化工作, 然后跳转至GRUB2的core image(以diskboot.img为起始)继续执行。
    core image的初始化代码将剩余的core image(包含GRUB 2的内核代码和文件系统驱动)加载到内存中，运行grub_main
  grub_main 初始化控制台，计算模块基地址，设置root设备，读取 grub 配置文件，加载模块等，最后将grub切换为normal模式
  normal模式调用grub_normal_execute完成最后的准备工作，显示一个菜单列出可用的操作系统。
  选择操作系统后grub_menu_execute_entry被调用，用以运行boot命令，引导操作系统, 运行kernel代码
  内核自带bootloader，但是新版本内核已经弃用
  kernel boot protocol规定，bootloader必须具备协议中规定的头信息
      实模式运行内核   kernel地址(header.S _start)位于X + sizeof(KernelBootSector) + 1
 内核加载进入内存后，空间排布   | Protected-mode kernel | 100000 +------------------------+ | I/O memory hole | 0A0000 +------------------------+ | Reserved for BIOS | Leave as much as possible unused ~ ~ | Command line | (Can also be below the X+10000 mark) X+10000 +------------------------+ | Stack/heap | For use by the kernel real-mode code.]]></description>
</item><item>
    <title>linux 内核提权总结(demo&#43;exp分析) -- 任意读写(四)</title>
    <link>https://povcfe.github.io/posts/kernel_rw4/</link>
    <pubDate>Sun, 02 Feb 2020 10:32:55 -0800</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_rw4/</guid>
    <description><![CDATA[发表于看雪论坛
hijack_modprobe_path篇   原理同hijack_prctl, 当用户执行错误格式的elf文件时内核调用call_usermodehelper(char *modprobe_path &hellip;)
  修改modprobe后，即可实现root权限任意命令执行
  攻击流程
 (内核任意读写漏洞)内核修改全局变量 modprobe_path为目标指令 写入错误格式elf文件，并手动执行，触发    一. 利用步骤 1. 定位modprobe_path(开启kaslr)   同hijack_vdso，泄漏vdso地址，因为内核kaslr开启后，只有较高字节的地址发生偏移，且vdso与基地址相距较近，所以可以使用vdso定位内核加载地址
  获得当前调试阶段modprobe_path与内核基地址固定偏移
  modprobe_path_addr = 内核基地址+固定偏移
  2. 修改modprobe_path 为任意指令 二. 驱动代码(见cred) 三. exp #define _GNU_SOURCE  #include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;fcntl.h&gt;#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/ioctl.h&gt;#include &lt;sys/auxv.h&gt;#include &lt;sys/prctl.h&gt; #define CHANGE_POINT 0x100000 #define RW_READ 0x100001 #define RW_WRITE 0x100002  size_t modprobe_path = 0xe3cba0; size_t vmlinux_base = 0; struct vunl { char *point; size_t size; } VUNL; void leak_data(int fd, char *buf) { char *res = NULL; VUNL.]]></description>
</item><item>
    <title>linux 内核提权总结(demo&#43;exp分析) -- 任意读写(三) </title>
    <link>https://povcfe.github.io/posts/kernel_rw3/</link>
    <pubDate>Thu, 30 Jan 2020 10:32:30 -0800</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_rw3/</guid>
    <description><![CDATA[发表于看雪论坛
hijack_prctl篇   prctl函数: 用户态函数，可用于定制进程参数，非常适合和内核进行交互
 用户态执行prctl函数后触发prctl系统调用 内核接收参数后执行security_task_prctl security_task_prctl执行hook.task_prctl    poweroff_work_func函数: 内核函数，执行 run_cmd(poweroff_cmd)，即root权限执行poweroff_cmd
  攻击流程:
 劫持hook.task_prctl为目标函数地址(poweroff_work_func) 修改poweroff_cmd为目标指令 用户执行prctl函数，触发    一. 利用步骤 1. 定位内核加载基地址(开启kaslr)  同hijack_vdso，泄漏vdso地址，因为内核kaslr开启后，只有较高字节的地址发生偏移，且vdso与基地址相距较近，所以可以使用vdso定位内核加载地址  2. 定位hook.prctl，poweroff_cmd地址   gdb调试内核并在security_task_prctl函数处下断点，用户态程序执行prctl函数，进入security_task_prctl函数，单步执行汇编指令，通过内存查看hook.task_prctl 地址
  gdb 执行 p poweroff_cmd，获得poweroff_cmd真实地址
  获得hook.prctl，poweroff_cmd与内核基地址固定偏移
  3. 修改poweroff_cmd 为任意指令 4. 用户态执行prctl函数，触发 二. 驱动代码(见cred篇) 三. exp #define _GNU_SOURCE  #include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;fcntl.h&gt;#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/ioctl.h&gt;#include &lt;sys/auxv.h&gt;#include &lt;sys/prctl.]]></description>
</item><item>
    <title>linux 内核提权总结(demo&#43;exp分析) -- 任意读写(二)</title>
    <link>https://povcfe.github.io/posts/kernel_rw2/</link>
    <pubDate>Tue, 21 Jan 2020 10:32:01 -0800</pubDate>
    <author>作者</author>
    <guid>https://povcfe.github.io/posts/kernel_rw2/</guid>
    <description><![CDATA[发表于看雪论坛
hijack_vdso篇   vdso: 内核实现的一个动态库，存在于内核，然后映射到用户态空间，可由用户态直接调用
 内核中的vdso如果被修改，那么用户态空间的vdso也会同步被修改    攻击流程
 (内核任意代码执行漏洞)内核调用set_memory_rw 函数修改内核vdso页面属性，使得用户态可以直接修改vdso，劫持vdso为shellcode，触发条件同1 (内核任意读写漏洞)内核修改内核vdso数据，写入shellcode，使得用户态vdso中函数被劫持，当高权限进程调用vdso中特定函数时，触发shellcode，本篇只讲解攻击流程2    一. 利用步骤 1. 定位内核态vdso位置   vdso中存在一些比较有特点的字符串，比如&quot;gettimeofday&quot;，在拥有任意读漏洞的前提下，从0xffffffff80000000(开启kaslr后内核基地址在此地址基础上往上偏移)开始按页搜索内存
  如果内存其他地方存在&quot;gettimeofday&quot;字符串，且出现在vdso之前，则会返回错误地址。所以在内存搜索时，应以返回地址为起始，使用gdb dump 0x2000 内存，使用ida查看是否是vdso，如果不是，可以忽略这个错误地址，继续向下搜索。
  得到真正的vdso后，查看&quot;gettimeofday&quot;与vdso起始地址的偏移，后续匹配vdso时，加上这个偏移条件
  2. 向内核中vdso写入shellcode   shellcode功能: 判断进程是否具有root权限，如果成立，则开辟新进程用来反弹root shell
  shellcode写入位置: 定位vdso上某函数，比如gettimeofday函数，使用shellcode覆盖
  shellcode触发条件: 当高权限进程调用gettimeofday函数时，自动执行shellcode 反弹root shell
  二. 驱动代码(见cred篇) 三. exp #define _GNU_SOURCE  #include &lt;stdio.h&gt;#include &lt;string.h&gt;#include &lt;fcntl.h&gt;#include &lt;unistd.h&gt;#include &lt;stdlib.h&gt;#include &lt;sys/ioctl.h&gt;#include &lt;sys/auxv.]]></description>
</item></channel>
</rss>
